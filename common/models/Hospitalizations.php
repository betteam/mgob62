<?php

namespace common\models;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "hospitalizations".
 *
 * @property int $id
 * @property int $created_at
 * @property int $updated_at
 * @property int $date_hospitalization Дата госпитализации
 * @property int $patient_id Пациент
 * @property int $diagnosis_id
 * @property int $chamber_id Палата
 * @property int $doctor_id Врач
 * @property int $status_id
 * @property int $planned_discharge_date Планируемая дата выписки
 *
 * @property Chambers $chamber
 * @property Diagnoses $diagnosis
 * @property Doctors $doctor
 * @property Patients $patient
 * @property HospitalizationsStatus $status
 */
class Hospitalizations extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'hospitalizations';
    }

    public function behaviors()
    {
        return [
            TimestampBehavior::class,
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['date_hospitalization', 'patient_id', 'diagnosis_id', 'chamber_id', 'doctor_id'], 'required'],
            [['date_hospitalization'], 'datetime', 'format' => 'php:d.m.Y', 'timestampAttribute' => 'date_hospitalization'],
            [['planned_discharge_date'], 'datetime', 'format' => 'php:d.m.Y', 'timestampAttribute' => 'planned_discharge_date'],
            ['date_hospitalization', 'default', 'value' => time()],
            ['status_id', 'default', 'value' => HospitalizationsStatus::HOSPITALIZED],
            [['created_at', 'updated_at', 'patient_id', 'diagnosis_id', 'chamber_id', 'doctor_id', 'status_id'], 'integer'],
            [['chamber_id'], 'exist', 'skipOnError' => true, 'targetClass' => Chambers::className(), 'targetAttribute' => ['chamber_id' => 'id']],
            [['diagnosis_id'], 'exist', 'skipOnError' => true, 'targetClass' => Diagnoses::className(), 'targetAttribute' => ['diagnosis_id' => 'id']],
            [['doctor_id'], 'exist', 'skipOnError' => true, 'targetClass' => Doctors::className(), 'targetAttribute' => ['doctor_id' => 'id']],
            [['status_id'], 'exist', 'skipOnError' => true, 'targetClass' => HospitalizationsStatus::className(), 'targetAttribute' => ['status_id' => 'id']],
            [['patient_id'], 'exist', 'skipOnError' => true, 'targetClass' => Patients::className(), 'targetAttribute' => ['patient_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'date_hospitalization' => 'Дата госпитализации',
            'patient_id' => 'Пациент',
            'diagnosis_id' => 'Диагноз',
            'chamber_id' => 'Палата',
            'doctor_id' => 'Врач',
            'status_id' => 'Status ID',
            'planned_discharge_date' => 'Планируемая дата выписки',
        ];
    }

    /**
     * Gets query for [[Chamber]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getChamber()
    {
        return $this->hasOne(Chambers::className(), ['id' => 'chamber_id']);
    }

    /**
     * Gets query for [[Diagnosis]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getDiagnosis()
    {
        return $this->hasOne(Diagnoses::className(), ['id' => 'diagnosis_id']);
    }

    /**
     * Gets query for [[Doctor]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getDoctor()
    {
        return $this->hasOne(Doctors::className(), ['id' => 'doctor_id']);
    }

    /**
     * Gets query for [[Patient]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getPatient()
    {
        return $this->hasOne(Patients::className(), ['id' => 'patient_id']);
    }

    /**
     * Gets query for [[Status]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getStatus()
    {
        return $this->hasOne(HospitalizationsStatus::className(), ['id' => 'status_id']);
    }

    public function afterSave($insert, $changedAttributes)
    {
        if($insert){
            // Удалить все запланированные госпитализации пациента
            HospitalizationsPlanned::deleteAll(['patient_id'=>$this->patient_id]);
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}
